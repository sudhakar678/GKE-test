steps:
  - name: gcr.io/cloud-builders/gcloud
    args:
      - '-c'
      - >-
        gcloud container clusters get-credentials "$_CLUSTER_NAME" --zone
        "$_ZONE" --project "$_PROJECT_ID"
    entrypoint: bash
  - name: gcr.io/cloud-builders/gcloud
    args:
      - builds
      - submit
      - '--region=us-central1'
      - '--tag'
      - >-
        us-central1-docker.pkg.dev/$_PROJECT_ID/$_REPO_NAME/test-image:$_TAG
    id: Build-Docker-Image
  - name: gcr.io/cloud-builders/gcloud
    args:
      - '-c'
      - gcloud container images describe us-central1-docker.pkg.dev/$_PROJECT_ID/$_REPO_NAME/test-image:$_TAG --format 'value(image_summary.digest)' > sha
    entrypoint: bash
  - name: gcr.io/cloud-builders/gcloud
    args:
      - '-c'
      - gcloud container binauthz create-signature-payload --artifact-url=us-central1-docker.pkg.dev/$_PROJECT_ID/$_REPO_NAME/test-image@$(awk 'NR==1{print $1}' sha) > ./generated_payload.json
    entrypoint: bash 
  - name: gcr.io/cloud-builders/gcloud
    args:
     - '-c'
     - openssl dgst -sha256 -sign ./ec_private.pem ./generated_payload.json > ./ec_signature
    entrypoint: bash
  - name: gcr.io/cloud-builders/gcloud
    args:
      - '-c'
      - gcloud container binauthz attestations create --project="$_PROJECT_ID" --artifact-url="us-central1-docker.pkg.dev/$_PROJECT_ID/$_REPO_NAME/test-image@$(awk 'NR==1{print $1}' sha)" --attestor=projects/$_PROJECT_ID/attestors/"$_ATTESTOR_NAME" --signature-file=./ec_signature --public-key-id="$_PUBILC_KEY_ID" --validate
    entrypoint: bash
  - name: gcr.io/cloud-builders/kubectl
    args:
      - '-c'
      - kubectl run deployment --namee=binary-test --image=us-central1-docker.pkg.dev/$_PROJECT_ID/$_REPO_NAME/test-image@$(awk 'NR==1{print $1}' sha)
      
  
